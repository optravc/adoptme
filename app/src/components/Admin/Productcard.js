'use client';
import React, { useState } from 'react';
import {
  Card, CardMedia, CardContent, Typography, Button, Box, Chip, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions
} from '@mui/material';
import EditProductForm from '../Admin/EditProductform';

export default function Productcard({ product, isAdmin, onDelete, onAddStock, onRemoveStock, onEdit }) {
  const [openEdit, setOpenEdit] = useState(false);
  const [openDialog, setOpenDialog] = useState(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state dialog
  const isOutOfStock = parseInt(product.stock) === 0;

  const mapTypeToFolder = (type) => {
    switch (type) {
      case '‡∏≠‡∏≤‡∏´‡∏≤‡∏£': return 'food';
      case '‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô': return 'toys';
      case '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå': return 'equipment';
      default: return 'else';
    }
  };

  const imageUrl = `/upload/${mapTypeToFolder(product.type)}/${product.image}`;

  const handleDeleteConfirm = () => {
    onDelete(product.id);  // ‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á
    setOpenDialog(false);  // ‡∏õ‡∏¥‡∏î dialog ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö
  };

  return (
    <>
      <Card sx={{ width: 300, height: 500, m: 2, display: 'flex', flexDirection: 'column', position: 'relative' }}>
        {isOutOfStock && (
          <Chip
            label="‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å"
            color="error"
            size="small"
            sx={{ position: 'absolute', top: 8, right: 8, zIndex: 1 }}
          />
        )}

        <CardMedia
          component="img"
          image={imageUrl}
          alt={product.name}
          sx={{ height: 200, objectFit: 'cover' }}
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = '/upload/else/default.jpg';
          }}
        />

        <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
          <Typography variant="h6" gutterBottom>{product.name}</Typography>
          <Typography variant="body2" color="text.secondary" sx={{ flexGrow: 1 }}>
            {product.description}
          </Typography>
          <Typography variant="body1" sx={{ mt: 1, fontWeight: 'bold' }}>
            ‡∏ø{parseFloat(product.price).toLocaleString()}
          </Typography>
          <Typography variant="body2" color="text.secondary">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {product.stock}</Typography>

          {isAdmin ? (
            <Box mt={2} sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  variant="contained"
                  color="success"
                  fullWidth
                  onClick={() => onAddStock(product.id)}
                >
                  ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°
                </Button>
                <Button
                  variant="contained"
                  color="secondary"
                  fullWidth
                  onClick={() => onRemoveStock(product.id)}
                >
                  ‚ûñ ‡∏•‡∏î
                </Button>
              </Box>

              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  variant="outlined"
                  color="warning"
                  fullWidth
                  onClick={() => setOpenEdit(true)}
                >
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </Button>
                <Button
                  variant="outlined"
                  color="error"
                  fullWidth
                  onClick={() => setOpenDialog(true)} // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÅ‡∏ó‡∏ô‡∏•‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                >
                  üóë ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
                </Button>
              </Box>
            </Box>
          ) : (
            <Box mt={2}>
              <Button
                variant="contained"
                color="primary"
                fullWidth
                onClick={handleAddToCart}
                disabled={isOutOfStock}
              >
                {isOutOfStock ? '‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å' : '‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}
              </Button>
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</DialogTitle>
        <DialogContent>
          <DialogContentText>
            ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "{product.name}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
          <Button onClick={handleDeleteConfirm} color="error">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö</Button>
        </DialogActions>
      </Dialog>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
      <EditProductForm
        open={openEdit}
        onClose={() => setOpenEdit(false)}
        product={product}
        onEdit={onEdit}
        isAdmin={isAdmin}
      />
    </>
  );
}
